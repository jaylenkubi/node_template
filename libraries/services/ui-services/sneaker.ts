/**
 * Generated by orval v6.24.0 üç∫
 * Do not edit manually.
 * thecube
 * Platform API
 * OpenAPI spec version: 1.0.0
 */
import {
  useMutation,
  useQuery
} from '@tanstack/react-query'
import type {
  MutationFunction,
  QueryFunction,
  QueryKey,
  UseMutationOptions,
  UseQueryOptions,
  UseQueryResult
} from '@tanstack/react-query'
import type {
  GetByQuerySneakerParams,
  Sneaker,
  SneakerEntity
} from './models'
import { customInstance } from './custom-instance-ui';



type SecondParameter<T extends (...args: any) => any> = Parameters<T>[1];


/**
 * @summary Get all sneakers
 */
export const getAllSneaker = (
    
 options?: SecondParameter<typeof customInstance>,signal?: AbortSignal
) => {
      
      
      return customInstance<SneakerEntity[]>(
      {url: `/v1/entities/sneaker`, method: 'GET', signal
    },
      options);
    }
  

export const getGetAllSneakerQueryKey = () => {
    return [`/v1/entities/sneaker`] as const;
    }

    
export const getGetAllSneakerQueryOptions = <TData = Awaited<ReturnType<typeof getAllSneaker>>, TError = unknown>( options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getAllSneaker>>, TError, TData>, request?: SecondParameter<typeof customInstance>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetAllSneakerQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getAllSneaker>>> = ({ signal }) => getAllSneaker(requestOptions, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getAllSneaker>>, TError, TData> & { queryKey: QueryKey }
}

export type GetAllSneakerQueryResult = NonNullable<Awaited<ReturnType<typeof getAllSneaker>>>
export type GetAllSneakerQueryError = unknown

/**
 * @summary Get all sneakers
 */
export const useGetAllSneaker = <TData = Awaited<ReturnType<typeof getAllSneaker>>, TError = unknown>(
  options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getAllSneaker>>, TError, TData>, request?: SecondParameter<typeof customInstance>}

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = getGetAllSneakerQueryOptions(options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



/**
 * @summary Create a sneaker
 */
export const createOneSneaker = (
    sneaker: Sneaker,
 options?: SecondParameter<typeof customInstance>,) => {
      
      
      return customInstance<SneakerEntity>(
      {url: `/v1/entities/sneaker`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: sneaker
    },
      options);
    }
  


export const getCreateOneSneakerMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof createOneSneaker>>, TError,{data: Sneaker}, TContext>, request?: SecondParameter<typeof customInstance>}
): UseMutationOptions<Awaited<ReturnType<typeof createOneSneaker>>, TError,{data: Sneaker}, TContext> => {
 const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof createOneSneaker>>, {data: Sneaker}> = (props) => {
          const {data} = props ?? {};

          return  createOneSneaker(data,requestOptions)
        }

        


   return  { mutationFn, ...mutationOptions }}

    export type CreateOneSneakerMutationResult = NonNullable<Awaited<ReturnType<typeof createOneSneaker>>>
    export type CreateOneSneakerMutationBody = Sneaker
    export type CreateOneSneakerMutationError = unknown

    /**
 * @summary Create a sneaker
 */
export const useCreateOneSneaker = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof createOneSneaker>>, TError,{data: Sneaker}, TContext>, request?: SecondParameter<typeof customInstance>}
) => {

      const mutationOptions = getCreateOneSneakerMutationOptions(options);

      return useMutation(mutationOptions);
    }
    /**
 * @summary Get sneakers by query
 */
export const getByQuerySneaker = (
    params?: GetByQuerySneakerParams,
 options?: SecondParameter<typeof customInstance>,signal?: AbortSignal
) => {
      
      
      return customInstance<SneakerEntity[]>(
      {url: `/v1/entities/sneaker/query`, method: 'GET',
        params, signal
    },
      options);
    }
  

export const getGetByQuerySneakerQueryKey = (params?: GetByQuerySneakerParams,) => {
    return [`/v1/entities/sneaker/query`, ...(params ? [params]: [])] as const;
    }

    
export const getGetByQuerySneakerQueryOptions = <TData = Awaited<ReturnType<typeof getByQuerySneaker>>, TError = unknown>(params?: GetByQuerySneakerParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getByQuerySneaker>>, TError, TData>, request?: SecondParameter<typeof customInstance>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetByQuerySneakerQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getByQuerySneaker>>> = ({ signal }) => getByQuerySneaker(params, requestOptions, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getByQuerySneaker>>, TError, TData> & { queryKey: QueryKey }
}

export type GetByQuerySneakerQueryResult = NonNullable<Awaited<ReturnType<typeof getByQuerySneaker>>>
export type GetByQuerySneakerQueryError = unknown

/**
 * @summary Get sneakers by query
 */
export const useGetByQuerySneaker = <TData = Awaited<ReturnType<typeof getByQuerySneaker>>, TError = unknown>(
 params?: GetByQuerySneakerParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getByQuerySneaker>>, TError, TData>, request?: SecondParameter<typeof customInstance>}

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = getGetByQuerySneakerQueryOptions(params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



/**
 * @summary Get sneaker by id
 */
export const getOneSneaker = (
    id: number,
 options?: SecondParameter<typeof customInstance>,signal?: AbortSignal
) => {
      
      
      return customInstance<SneakerEntity>(
      {url: `/v1/entities/sneaker/${id}`, method: 'GET', signal
    },
      options);
    }
  

export const getGetOneSneakerQueryKey = (id: number,) => {
    return [`/v1/entities/sneaker/${id}`] as const;
    }

    
export const getGetOneSneakerQueryOptions = <TData = Awaited<ReturnType<typeof getOneSneaker>>, TError = unknown>(id: number, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getOneSneaker>>, TError, TData>, request?: SecondParameter<typeof customInstance>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetOneSneakerQueryKey(id);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getOneSneaker>>> = ({ signal }) => getOneSneaker(id, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(id), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getOneSneaker>>, TError, TData> & { queryKey: QueryKey }
}

export type GetOneSneakerQueryResult = NonNullable<Awaited<ReturnType<typeof getOneSneaker>>>
export type GetOneSneakerQueryError = unknown

/**
 * @summary Get sneaker by id
 */
export const useGetOneSneaker = <TData = Awaited<ReturnType<typeof getOneSneaker>>, TError = unknown>(
 id: number, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getOneSneaker>>, TError, TData>, request?: SecondParameter<typeof customInstance>}

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = getGetOneSneakerQueryOptions(id,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



/**
 * @summary Update a sneaker
 */
export const updateOneSneaker = (
    id: unknown,
    sneakerEntity: SneakerEntity,
 options?: SecondParameter<typeof customInstance>,) => {
      
      
      return customInstance<unknown>(
      {url: `/v1/entities/sneaker/${id}`, method: 'PUT',
      headers: {'Content-Type': 'application/json', },
      data: sneakerEntity
    },
      options);
    }
  


export const getUpdateOneSneakerMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof updateOneSneaker>>, TError,{id: unknown;data: SneakerEntity}, TContext>, request?: SecondParameter<typeof customInstance>}
): UseMutationOptions<Awaited<ReturnType<typeof updateOneSneaker>>, TError,{id: unknown;data: SneakerEntity}, TContext> => {
 const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof updateOneSneaker>>, {id: unknown;data: SneakerEntity}> = (props) => {
          const {id,data} = props ?? {};

          return  updateOneSneaker(id,data,requestOptions)
        }

        


   return  { mutationFn, ...mutationOptions }}

    export type UpdateOneSneakerMutationResult = NonNullable<Awaited<ReturnType<typeof updateOneSneaker>>>
    export type UpdateOneSneakerMutationBody = SneakerEntity
    export type UpdateOneSneakerMutationError = unknown

    /**
 * @summary Update a sneaker
 */
export const useUpdateOneSneaker = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof updateOneSneaker>>, TError,{id: unknown;data: SneakerEntity}, TContext>, request?: SecondParameter<typeof customInstance>}
) => {

      const mutationOptions = getUpdateOneSneakerMutationOptions(options);

      return useMutation(mutationOptions);
    }
    /**
 * @summary Remove a sneaker
 */
export const removeOneSneaker = (
    id: number,
 options?: SecondParameter<typeof customInstance>,) => {
      
      
      return customInstance<unknown>(
      {url: `/v1/entities/sneaker/${id}`, method: 'DELETE'
    },
      options);
    }
  


export const getRemoveOneSneakerMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof removeOneSneaker>>, TError,{id: number}, TContext>, request?: SecondParameter<typeof customInstance>}
): UseMutationOptions<Awaited<ReturnType<typeof removeOneSneaker>>, TError,{id: number}, TContext> => {
 const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof removeOneSneaker>>, {id: number}> = (props) => {
          const {id} = props ?? {};

          return  removeOneSneaker(id,requestOptions)
        }

        


   return  { mutationFn, ...mutationOptions }}

    export type RemoveOneSneakerMutationResult = NonNullable<Awaited<ReturnType<typeof removeOneSneaker>>>
    
    export type RemoveOneSneakerMutationError = unknown

    /**
 * @summary Remove a sneaker
 */
export const useRemoveOneSneaker = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof removeOneSneaker>>, TError,{id: number}, TContext>, request?: SecondParameter<typeof customInstance>}
) => {

      const mutationOptions = getRemoveOneSneakerMutationOptions(options);

      return useMutation(mutationOptions);
    }
    