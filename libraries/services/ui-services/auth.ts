/**
 * Generated by orval v6.24.0 üç∫
 * Do not edit manually.
 * thecube
 * Platform API
 * OpenAPI spec version: 1.0.0
 */
import {
  useMutation
} from '@tanstack/react-query'
import type {
  MutationFunction,
  UseMutationOptions
} from '@tanstack/react-query'
import type {
  AuthSchema,
  User,
  UserCredential,
  UserEntity,
  ValidateSchema
} from './models'
import { customInstance } from './custom-instance-ui';



type SecondParameter<T extends (...args: any) => any> = Parameters<T>[1];


/**
 * @summary Platform auth user login
 */
export const login = (
    userCredential: UserCredential,
 options?: SecondParameter<typeof customInstance>,) => {
      
      
      return customInstance<AuthSchema>(
      {url: `/v1/exec/auth/login`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: userCredential
    },
      options);
    }
  


export const getLoginMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof login>>, TError,{data: UserCredential}, TContext>, request?: SecondParameter<typeof customInstance>}
): UseMutationOptions<Awaited<ReturnType<typeof login>>, TError,{data: UserCredential}, TContext> => {
 const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof login>>, {data: UserCredential}> = (props) => {
          const {data} = props ?? {};

          return  login(data,requestOptions)
        }

        


   return  { mutationFn, ...mutationOptions }}

    export type LoginMutationResult = NonNullable<Awaited<ReturnType<typeof login>>>
    export type LoginMutationBody = UserCredential
    export type LoginMutationError = unknown

    /**
 * @summary Platform auth user login
 */
export const useLogin = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof login>>, TError,{data: UserCredential}, TContext>, request?: SecondParameter<typeof customInstance>}
) => {

      const mutationOptions = getLoginMutationOptions(options);

      return useMutation(mutationOptions);
    }
    /**
 * @summary Platform auth user registration
 */
export const register = (
    user: User,
 options?: SecondParameter<typeof customInstance>,) => {
      
      
      return customInstance<AuthSchema>(
      {url: `/v1/exec/auth/register`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: user
    },
      options);
    }
  


export const getRegisterMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof register>>, TError,{data: User}, TContext>, request?: SecondParameter<typeof customInstance>}
): UseMutationOptions<Awaited<ReturnType<typeof register>>, TError,{data: User}, TContext> => {
 const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof register>>, {data: User}> = (props) => {
          const {data} = props ?? {};

          return  register(data,requestOptions)
        }

        


   return  { mutationFn, ...mutationOptions }}

    export type RegisterMutationResult = NonNullable<Awaited<ReturnType<typeof register>>>
    export type RegisterMutationBody = User
    export type RegisterMutationError = unknown

    /**
 * @summary Platform auth user registration
 */
export const useRegister = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof register>>, TError,{data: User}, TContext>, request?: SecondParameter<typeof customInstance>}
) => {

      const mutationOptions = getRegisterMutationOptions(options);

      return useMutation(mutationOptions);
    }
    /**
 * @summary Platform auth token validation
 */
export const validate = (
    validateSchema: ValidateSchema,
 options?: SecondParameter<typeof customInstance>,) => {
      
      
      return customInstance<UserEntity>(
      {url: `/v1/exec/auth/validate`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: validateSchema
    },
      options);
    }
  


export const getValidateMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof validate>>, TError,{data: ValidateSchema}, TContext>, request?: SecondParameter<typeof customInstance>}
): UseMutationOptions<Awaited<ReturnType<typeof validate>>, TError,{data: ValidateSchema}, TContext> => {
 const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof validate>>, {data: ValidateSchema}> = (props) => {
          const {data} = props ?? {};

          return  validate(data,requestOptions)
        }

        


   return  { mutationFn, ...mutationOptions }}

    export type ValidateMutationResult = NonNullable<Awaited<ReturnType<typeof validate>>>
    export type ValidateMutationBody = ValidateSchema
    export type ValidateMutationError = unknown

    /**
 * @summary Platform auth token validation
 */
export const useValidate = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof validate>>, TError,{data: ValidateSchema}, TContext>, request?: SecondParameter<typeof customInstance>}
) => {

      const mutationOptions = getValidateMutationOptions(options);

      return useMutation(mutationOptions);
    }
    