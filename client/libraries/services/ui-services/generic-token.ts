/**
 * Generated by orval v6.28.2 üç∫
 * Do not edit manually.
 * thecube
 * Platform API
 * OpenAPI spec version: 1.0.0
 */
import {
  useMutation,
  useQuery
} from '@tanstack/react-query'
import type {
  MutationFunction,
  QueryFunction,
  QueryKey,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult
} from '@tanstack/react-query'
import type {
  GenericToken,
  GenericTokenEntity,
  GetByQueryGenericTokenParams
} from './models'
import { customInstance } from './custom-instance-ui';



type SecondParameter<T extends (...args: any) => any> = Parameters<T>[1];


/**
 * @summary Get all genericTokens
 */
export const getAllGenericToken = (
    
 options?: SecondParameter<typeof customInstance>,signal?: AbortSignal
) => {
      
      
      return customInstance<GenericTokenEntity[]>(
      {url: `/v1/entities/genericToken`, method: 'GET', signal
    },
      options);
    }
  

export const getGetAllGenericTokenQueryKey = () => {
    return [`/v1/entities/genericToken`] as const;
    }

    
export const getGetAllGenericTokenQueryOptions = <TData = Awaited<ReturnType<typeof getAllGenericToken>>, TError = unknown>( options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAllGenericToken>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetAllGenericTokenQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getAllGenericToken>>> = ({ signal }) => getAllGenericToken(requestOptions, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getAllGenericToken>>, TError, TData> & { queryKey: QueryKey }
}

export type GetAllGenericTokenQueryResult = NonNullable<Awaited<ReturnType<typeof getAllGenericToken>>>
export type GetAllGenericTokenQueryError = unknown

/**
 * @summary Get all genericTokens
 */
export const useGetAllGenericToken = <TData = Awaited<ReturnType<typeof getAllGenericToken>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAllGenericToken>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = getGetAllGenericTokenQueryOptions(options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



/**
 * @summary Create a genericToken
 */
export const createOneGenericToken = (
    genericToken?: GenericToken,
 options?: SecondParameter<typeof customInstance>,) => {
      
      
      return customInstance<GenericTokenEntity>(
      {url: `/v1/entities/genericToken`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: genericToken
    },
      options);
    }
  


export const getCreateOneGenericTokenMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof createOneGenericToken>>, TError,{data: GenericToken}, TContext>, request?: SecondParameter<typeof customInstance>}
): UseMutationOptions<Awaited<ReturnType<typeof createOneGenericToken>>, TError,{data: GenericToken}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof createOneGenericToken>>, {data: GenericToken}> = (props) => {
          const {data} = props ?? {};

          return  createOneGenericToken(data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type CreateOneGenericTokenMutationResult = NonNullable<Awaited<ReturnType<typeof createOneGenericToken>>>
    export type CreateOneGenericTokenMutationBody = GenericToken
    export type CreateOneGenericTokenMutationError = unknown

    /**
 * @summary Create a genericToken
 */
export const useCreateOneGenericToken = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof createOneGenericToken>>, TError,{data: GenericToken}, TContext>, request?: SecondParameter<typeof customInstance>}
): UseMutationResult<
        Awaited<ReturnType<typeof createOneGenericToken>>,
        TError,
        {data: GenericToken},
        TContext
      > => {

      const mutationOptions = getCreateOneGenericTokenMutationOptions(options);

      return useMutation(mutationOptions);
    }
    /**
 * @summary Get genericTokens by query
 */
export const getByQueryGenericToken = (
    params?: GetByQueryGenericTokenParams,
 options?: SecondParameter<typeof customInstance>,signal?: AbortSignal
) => {
      
      
      return customInstance<GenericTokenEntity[]>(
      {url: `/v1/entities/genericToken/query`, method: 'GET',
        params, signal
    },
      options);
    }
  

export const getGetByQueryGenericTokenQueryKey = (params?: GetByQueryGenericTokenParams,) => {
    return [`/v1/entities/genericToken/query`, ...(params ? [params]: [])] as const;
    }

    
export const getGetByQueryGenericTokenQueryOptions = <TData = Awaited<ReturnType<typeof getByQueryGenericToken>>, TError = unknown>(params?: GetByQueryGenericTokenParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getByQueryGenericToken>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetByQueryGenericTokenQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getByQueryGenericToken>>> = ({ signal }) => getByQueryGenericToken(params, requestOptions, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getByQueryGenericToken>>, TError, TData> & { queryKey: QueryKey }
}

export type GetByQueryGenericTokenQueryResult = NonNullable<Awaited<ReturnType<typeof getByQueryGenericToken>>>
export type GetByQueryGenericTokenQueryError = unknown

/**
 * @summary Get genericTokens by query
 */
export const useGetByQueryGenericToken = <TData = Awaited<ReturnType<typeof getByQueryGenericToken>>, TError = unknown>(
 params?: GetByQueryGenericTokenParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getByQueryGenericToken>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = getGetByQueryGenericTokenQueryOptions(params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



/**
 * @summary Get genericToken by id
 */
export const getOneGenericToken = (
    id: number,
 options?: SecondParameter<typeof customInstance>,signal?: AbortSignal
) => {
      
      
      return customInstance<GenericTokenEntity>(
      {url: `/v1/entities/genericToken/${id}`, method: 'GET', signal
    },
      options);
    }
  

export const getGetOneGenericTokenQueryKey = (id: number,) => {
    return [`/v1/entities/genericToken/${id}`] as const;
    }

    
export const getGetOneGenericTokenQueryOptions = <TData = Awaited<ReturnType<typeof getOneGenericToken>>, TError = unknown>(id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOneGenericToken>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetOneGenericTokenQueryKey(id);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getOneGenericToken>>> = ({ signal }) => getOneGenericToken(id, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(id), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getOneGenericToken>>, TError, TData> & { queryKey: QueryKey }
}

export type GetOneGenericTokenQueryResult = NonNullable<Awaited<ReturnType<typeof getOneGenericToken>>>
export type GetOneGenericTokenQueryError = unknown

/**
 * @summary Get genericToken by id
 */
export const useGetOneGenericToken = <TData = Awaited<ReturnType<typeof getOneGenericToken>>, TError = unknown>(
 id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOneGenericToken>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = getGetOneGenericTokenQueryOptions(id,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



/**
 * @summary Update a genericToken
 */
export const updateOneGenericToken = (
    id: unknown,
    genericTokenEntity?: GenericTokenEntity,
 options?: SecondParameter<typeof customInstance>,) => {
      
      
      return customInstance<unknown>(
      {url: `/v1/entities/genericToken/${id}`, method: 'PUT',
      headers: {'Content-Type': 'application/json', },
      data: genericTokenEntity
    },
      options);
    }
  


export const getUpdateOneGenericTokenMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof updateOneGenericToken>>, TError,{id: unknown;data: GenericTokenEntity}, TContext>, request?: SecondParameter<typeof customInstance>}
): UseMutationOptions<Awaited<ReturnType<typeof updateOneGenericToken>>, TError,{id: unknown;data: GenericTokenEntity}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof updateOneGenericToken>>, {id: unknown;data: GenericTokenEntity}> = (props) => {
          const {id,data} = props ?? {};

          return  updateOneGenericToken(id,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type UpdateOneGenericTokenMutationResult = NonNullable<Awaited<ReturnType<typeof updateOneGenericToken>>>
    export type UpdateOneGenericTokenMutationBody = GenericTokenEntity
    export type UpdateOneGenericTokenMutationError = unknown

    /**
 * @summary Update a genericToken
 */
export const useUpdateOneGenericToken = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof updateOneGenericToken>>, TError,{id: unknown;data: GenericTokenEntity}, TContext>, request?: SecondParameter<typeof customInstance>}
): UseMutationResult<
        Awaited<ReturnType<typeof updateOneGenericToken>>,
        TError,
        {id: unknown;data: GenericTokenEntity},
        TContext
      > => {

      const mutationOptions = getUpdateOneGenericTokenMutationOptions(options);

      return useMutation(mutationOptions);
    }
    /**
 * @summary Remove a genericToken
 */
export const removeOneGenericToken = (
    id: number,
 options?: SecondParameter<typeof customInstance>,) => {
      
      
      return customInstance<unknown>(
      {url: `/v1/entities/genericToken/${id}`, method: 'DELETE'
    },
      options);
    }
  


export const getRemoveOneGenericTokenMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof removeOneGenericToken>>, TError,{id: number}, TContext>, request?: SecondParameter<typeof customInstance>}
): UseMutationOptions<Awaited<ReturnType<typeof removeOneGenericToken>>, TError,{id: number}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof removeOneGenericToken>>, {id: number}> = (props) => {
          const {id} = props ?? {};

          return  removeOneGenericToken(id,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type RemoveOneGenericTokenMutationResult = NonNullable<Awaited<ReturnType<typeof removeOneGenericToken>>>
    
    export type RemoveOneGenericTokenMutationError = unknown

    /**
 * @summary Remove a genericToken
 */
export const useRemoveOneGenericToken = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof removeOneGenericToken>>, TError,{id: number}, TContext>, request?: SecondParameter<typeof customInstance>}
): UseMutationResult<
        Awaited<ReturnType<typeof removeOneGenericToken>>,
        TError,
        {id: number},
        TContext
      > => {

      const mutationOptions = getRemoveOneGenericTokenMutationOptions(options);

      return useMutation(mutationOptions);
    }
    