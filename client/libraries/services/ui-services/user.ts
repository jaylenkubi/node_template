/**
 * Generated by orval v6.24.0 üç∫
 * Do not edit manually.
 * thecube
 * Platform API
 * OpenAPI spec version: 1.0.0
 */
import {
  useMutation,
  useQuery
} from '@tanstack/react-query'
import type {
  MutationFunction,
  QueryFunction,
  QueryKey,
  UseMutationOptions,
  UseQueryOptions,
  UseQueryResult
} from '@tanstack/react-query'
import type {
  GetByQueryUserParams,
  User,
  UserEntity
} from './models'
import { customInstance } from './custom-instance-ui';



type SecondParameter<T extends (...args: any) => any> = Parameters<T>[1];


/**
 * @summary Get all users
 */
export const getAllUser = (
    
 options?: SecondParameter<typeof customInstance>,signal?: AbortSignal
) => {
      
      
      return customInstance<UserEntity[]>(
      {url: `/v1/entities/user`, method: 'GET', signal
    },
      options);
    }
  

export const getGetAllUserQueryKey = () => {
    return [`/v1/entities/user`] as const;
    }

    
export const getGetAllUserQueryOptions = <TData = Awaited<ReturnType<typeof getAllUser>>, TError = unknown>( options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAllUser>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetAllUserQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getAllUser>>> = ({ signal }) => getAllUser(requestOptions, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getAllUser>>, TError, TData> & { queryKey: QueryKey }
}

export type GetAllUserQueryResult = NonNullable<Awaited<ReturnType<typeof getAllUser>>>
export type GetAllUserQueryError = unknown

/**
 * @summary Get all users
 */
export const useGetAllUser = <TData = Awaited<ReturnType<typeof getAllUser>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAllUser>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = getGetAllUserQueryOptions(options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



/**
 * @summary Create a user
 */
export const createOneUser = (
    user: User,
 options?: SecondParameter<typeof customInstance>,) => {
      
      
      return customInstance<UserEntity>(
      {url: `/v1/entities/user`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: user
    },
      options);
    }
  


export const getCreateOneUserMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof createOneUser>>, TError,{data: User}, TContext>, request?: SecondParameter<typeof customInstance>}
): UseMutationOptions<Awaited<ReturnType<typeof createOneUser>>, TError,{data: User}, TContext> => {
 const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof createOneUser>>, {data: User}> = (props) => {
          const {data} = props ?? {};

          return  createOneUser(data,requestOptions)
        }

        


   return  { mutationFn, ...mutationOptions }}

    export type CreateOneUserMutationResult = NonNullable<Awaited<ReturnType<typeof createOneUser>>>
    export type CreateOneUserMutationBody = User
    export type CreateOneUserMutationError = unknown

    /**
 * @summary Create a user
 */
export const useCreateOneUser = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof createOneUser>>, TError,{data: User}, TContext>, request?: SecondParameter<typeof customInstance>}
) => {

      const mutationOptions = getCreateOneUserMutationOptions(options);

      return useMutation(mutationOptions);
    }
    /**
 * @summary Get users by query
 */
export const getByQueryUser = (
    params?: GetByQueryUserParams,
 options?: SecondParameter<typeof customInstance>,signal?: AbortSignal
) => {
      
      
      return customInstance<UserEntity[]>(
      {url: `/v1/entities/user/query`, method: 'GET',
        params, signal
    },
      options);
    }
  

export const getGetByQueryUserQueryKey = (params?: GetByQueryUserParams,) => {
    return [`/v1/entities/user/query`, ...(params ? [params]: [])] as const;
    }

    
export const getGetByQueryUserQueryOptions = <TData = Awaited<ReturnType<typeof getByQueryUser>>, TError = unknown>(params?: GetByQueryUserParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getByQueryUser>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetByQueryUserQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getByQueryUser>>> = ({ signal }) => getByQueryUser(params, requestOptions, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getByQueryUser>>, TError, TData> & { queryKey: QueryKey }
}

export type GetByQueryUserQueryResult = NonNullable<Awaited<ReturnType<typeof getByQueryUser>>>
export type GetByQueryUserQueryError = unknown

/**
 * @summary Get users by query
 */
export const useGetByQueryUser = <TData = Awaited<ReturnType<typeof getByQueryUser>>, TError = unknown>(
 params?: GetByQueryUserParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getByQueryUser>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = getGetByQueryUserQueryOptions(params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



/**
 * @summary Get user by id
 */
export const getOneUser = (
    id: number,
 options?: SecondParameter<typeof customInstance>,signal?: AbortSignal
) => {
      
      
      return customInstance<UserEntity>(
      {url: `/v1/entities/user/${id}`, method: 'GET', signal
    },
      options);
    }
  

export const getGetOneUserQueryKey = (id: number,) => {
    return [`/v1/entities/user/${id}`] as const;
    }

    
export const getGetOneUserQueryOptions = <TData = Awaited<ReturnType<typeof getOneUser>>, TError = unknown>(id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOneUser>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetOneUserQueryKey(id);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getOneUser>>> = ({ signal }) => getOneUser(id, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(id), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getOneUser>>, TError, TData> & { queryKey: QueryKey }
}

export type GetOneUserQueryResult = NonNullable<Awaited<ReturnType<typeof getOneUser>>>
export type GetOneUserQueryError = unknown

/**
 * @summary Get user by id
 */
export const useGetOneUser = <TData = Awaited<ReturnType<typeof getOneUser>>, TError = unknown>(
 id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOneUser>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = getGetOneUserQueryOptions(id,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



/**
 * @summary Update a user
 */
export const updateOneUser = (
    id: unknown,
    userEntity: UserEntity,
 options?: SecondParameter<typeof customInstance>,) => {
      
      
      return customInstance<unknown>(
      {url: `/v1/entities/user/${id}`, method: 'PUT',
      headers: {'Content-Type': 'application/json', },
      data: userEntity
    },
      options);
    }
  


export const getUpdateOneUserMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof updateOneUser>>, TError,{id: unknown;data: UserEntity}, TContext>, request?: SecondParameter<typeof customInstance>}
): UseMutationOptions<Awaited<ReturnType<typeof updateOneUser>>, TError,{id: unknown;data: UserEntity}, TContext> => {
 const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof updateOneUser>>, {id: unknown;data: UserEntity}> = (props) => {
          const {id,data} = props ?? {};

          return  updateOneUser(id,data,requestOptions)
        }

        


   return  { mutationFn, ...mutationOptions }}

    export type UpdateOneUserMutationResult = NonNullable<Awaited<ReturnType<typeof updateOneUser>>>
    export type UpdateOneUserMutationBody = UserEntity
    export type UpdateOneUserMutationError = unknown

    /**
 * @summary Update a user
 */
export const useUpdateOneUser = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof updateOneUser>>, TError,{id: unknown;data: UserEntity}, TContext>, request?: SecondParameter<typeof customInstance>}
) => {

      const mutationOptions = getUpdateOneUserMutationOptions(options);

      return useMutation(mutationOptions);
    }
    /**
 * @summary Remove a user
 */
export const removeOneUser = (
    id: number,
 options?: SecondParameter<typeof customInstance>,) => {
      
      
      return customInstance<unknown>(
      {url: `/v1/entities/user/${id}`, method: 'DELETE'
    },
      options);
    }
  


export const getRemoveOneUserMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof removeOneUser>>, TError,{id: number}, TContext>, request?: SecondParameter<typeof customInstance>}
): UseMutationOptions<Awaited<ReturnType<typeof removeOneUser>>, TError,{id: number}, TContext> => {
 const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof removeOneUser>>, {id: number}> = (props) => {
          const {id} = props ?? {};

          return  removeOneUser(id,requestOptions)
        }

        


   return  { mutationFn, ...mutationOptions }}

    export type RemoveOneUserMutationResult = NonNullable<Awaited<ReturnType<typeof removeOneUser>>>
    
    export type RemoveOneUserMutationError = unknown

    /**
 * @summary Remove a user
 */
export const useRemoveOneUser = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof removeOneUser>>, TError,{id: number}, TContext>, request?: SecondParameter<typeof customInstance>}
) => {

      const mutationOptions = getRemoveOneUserMutationOptions(options);

      return useMutation(mutationOptions);
    }
    