/**
 * Generated by orval v6.28.2 üç∫
 * Do not edit manually.
 * thecube
 * Platform API
 * OpenAPI spec version: 1.0.0
 */
import {
  useMutation,
  useQuery
} from '@tanstack/react-query'
import type {
  MutationFunction,
  QueryFunction,
  QueryKey,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult
} from '@tanstack/react-query'
import type {
  GetByQuerySizeParams,
  Size,
  SizeEntity
} from './models'
import { customInstance } from './custom-instance-ui';



type SecondParameter<T extends (...args: any) => any> = Parameters<T>[1];


/**
 * @summary Get all sizes
 */
export const getAllSize = (
    
 options?: SecondParameter<typeof customInstance>,signal?: AbortSignal
) => {
      
      
      return customInstance<SizeEntity[]>(
      {url: `/v1/entities/size`, method: 'GET', signal
    },
      options);
    }
  

export const getGetAllSizeQueryKey = () => {
    return [`/v1/entities/size`] as const;
    }

    
export const getGetAllSizeQueryOptions = <TData = Awaited<ReturnType<typeof getAllSize>>, TError = unknown>( options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAllSize>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetAllSizeQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getAllSize>>> = ({ signal }) => getAllSize(requestOptions, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getAllSize>>, TError, TData> & { queryKey: QueryKey }
}

export type GetAllSizeQueryResult = NonNullable<Awaited<ReturnType<typeof getAllSize>>>
export type GetAllSizeQueryError = unknown

/**
 * @summary Get all sizes
 */
export const useGetAllSize = <TData = Awaited<ReturnType<typeof getAllSize>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAllSize>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = getGetAllSizeQueryOptions(options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



/**
 * @summary Create a size
 */
export const createOneSize = (
    size?: Size,
 options?: SecondParameter<typeof customInstance>,) => {
      
      
      return customInstance<SizeEntity>(
      {url: `/v1/entities/size`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: size
    },
      options);
    }
  


export const getCreateOneSizeMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof createOneSize>>, TError,{data: Size}, TContext>, request?: SecondParameter<typeof customInstance>}
): UseMutationOptions<Awaited<ReturnType<typeof createOneSize>>, TError,{data: Size}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof createOneSize>>, {data: Size}> = (props) => {
          const {data} = props ?? {};

          return  createOneSize(data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type CreateOneSizeMutationResult = NonNullable<Awaited<ReturnType<typeof createOneSize>>>
    export type CreateOneSizeMutationBody = Size
    export type CreateOneSizeMutationError = unknown

    /**
 * @summary Create a size
 */
export const useCreateOneSize = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof createOneSize>>, TError,{data: Size}, TContext>, request?: SecondParameter<typeof customInstance>}
): UseMutationResult<
        Awaited<ReturnType<typeof createOneSize>>,
        TError,
        {data: Size},
        TContext
      > => {

      const mutationOptions = getCreateOneSizeMutationOptions(options);

      return useMutation(mutationOptions);
    }
    /**
 * @summary Get sizes by query
 */
export const getByQuerySize = (
    params?: GetByQuerySizeParams,
 options?: SecondParameter<typeof customInstance>,signal?: AbortSignal
) => {
      
      
      return customInstance<SizeEntity[]>(
      {url: `/v1/entities/size/query`, method: 'GET',
        params, signal
    },
      options);
    }
  

export const getGetByQuerySizeQueryKey = (params?: GetByQuerySizeParams,) => {
    return [`/v1/entities/size/query`, ...(params ? [params]: [])] as const;
    }

    
export const getGetByQuerySizeQueryOptions = <TData = Awaited<ReturnType<typeof getByQuerySize>>, TError = unknown>(params?: GetByQuerySizeParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getByQuerySize>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetByQuerySizeQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getByQuerySize>>> = ({ signal }) => getByQuerySize(params, requestOptions, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getByQuerySize>>, TError, TData> & { queryKey: QueryKey }
}

export type GetByQuerySizeQueryResult = NonNullable<Awaited<ReturnType<typeof getByQuerySize>>>
export type GetByQuerySizeQueryError = unknown

/**
 * @summary Get sizes by query
 */
export const useGetByQuerySize = <TData = Awaited<ReturnType<typeof getByQuerySize>>, TError = unknown>(
 params?: GetByQuerySizeParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getByQuerySize>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = getGetByQuerySizeQueryOptions(params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



/**
 * @summary Get size by id
 */
export const getOneSize = (
    id: number,
 options?: SecondParameter<typeof customInstance>,signal?: AbortSignal
) => {
      
      
      return customInstance<SizeEntity>(
      {url: `/v1/entities/size/${id}`, method: 'GET', signal
    },
      options);
    }
  

export const getGetOneSizeQueryKey = (id: number,) => {
    return [`/v1/entities/size/${id}`] as const;
    }

    
export const getGetOneSizeQueryOptions = <TData = Awaited<ReturnType<typeof getOneSize>>, TError = unknown>(id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOneSize>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetOneSizeQueryKey(id);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getOneSize>>> = ({ signal }) => getOneSize(id, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(id), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getOneSize>>, TError, TData> & { queryKey: QueryKey }
}

export type GetOneSizeQueryResult = NonNullable<Awaited<ReturnType<typeof getOneSize>>>
export type GetOneSizeQueryError = unknown

/**
 * @summary Get size by id
 */
export const useGetOneSize = <TData = Awaited<ReturnType<typeof getOneSize>>, TError = unknown>(
 id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOneSize>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = getGetOneSizeQueryOptions(id,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



/**
 * @summary Update a size
 */
export const updateOneSize = (
    id: unknown,
    sizeEntity?: SizeEntity,
 options?: SecondParameter<typeof customInstance>,) => {
      
      
      return customInstance<unknown>(
      {url: `/v1/entities/size/${id}`, method: 'PUT',
      headers: {'Content-Type': 'application/json', },
      data: sizeEntity
    },
      options);
    }
  


export const getUpdateOneSizeMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof updateOneSize>>, TError,{id: unknown;data: SizeEntity}, TContext>, request?: SecondParameter<typeof customInstance>}
): UseMutationOptions<Awaited<ReturnType<typeof updateOneSize>>, TError,{id: unknown;data: SizeEntity}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof updateOneSize>>, {id: unknown;data: SizeEntity}> = (props) => {
          const {id,data} = props ?? {};

          return  updateOneSize(id,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type UpdateOneSizeMutationResult = NonNullable<Awaited<ReturnType<typeof updateOneSize>>>
    export type UpdateOneSizeMutationBody = SizeEntity
    export type UpdateOneSizeMutationError = unknown

    /**
 * @summary Update a size
 */
export const useUpdateOneSize = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof updateOneSize>>, TError,{id: unknown;data: SizeEntity}, TContext>, request?: SecondParameter<typeof customInstance>}
): UseMutationResult<
        Awaited<ReturnType<typeof updateOneSize>>,
        TError,
        {id: unknown;data: SizeEntity},
        TContext
      > => {

      const mutationOptions = getUpdateOneSizeMutationOptions(options);

      return useMutation(mutationOptions);
    }
    /**
 * @summary Remove a size
 */
export const removeOneSize = (
    id: number,
 options?: SecondParameter<typeof customInstance>,) => {
      
      
      return customInstance<unknown>(
      {url: `/v1/entities/size/${id}`, method: 'DELETE'
    },
      options);
    }
  


export const getRemoveOneSizeMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof removeOneSize>>, TError,{id: number}, TContext>, request?: SecondParameter<typeof customInstance>}
): UseMutationOptions<Awaited<ReturnType<typeof removeOneSize>>, TError,{id: number}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof removeOneSize>>, {id: number}> = (props) => {
          const {id} = props ?? {};

          return  removeOneSize(id,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type RemoveOneSizeMutationResult = NonNullable<Awaited<ReturnType<typeof removeOneSize>>>
    
    export type RemoveOneSizeMutationError = unknown

    /**
 * @summary Remove a size
 */
export const useRemoveOneSize = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof removeOneSize>>, TError,{id: number}, TContext>, request?: SecondParameter<typeof customInstance>}
): UseMutationResult<
        Awaited<ReturnType<typeof removeOneSize>>,
        TError,
        {id: number},
        TContext
      > => {

      const mutationOptions = getRemoveOneSizeMutationOptions(options);

      return useMutation(mutationOptions);
    }
    