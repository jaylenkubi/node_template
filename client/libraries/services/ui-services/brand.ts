/**
 * Generated by orval v6.24.0 üç∫
 * Do not edit manually.
 * thecube
 * Platform API
 * OpenAPI spec version: 1.0.0
 */
import {
  useMutation,
  useQuery
} from '@tanstack/react-query'
import type {
  MutationFunction,
  QueryFunction,
  QueryKey,
  UseMutationOptions,
  UseQueryOptions,
  UseQueryResult
} from '@tanstack/react-query'
import type {
  Brand,
  BrandEnitiy,
  GetByQueryBrandParams
} from './models'
import { customInstance } from './custom-instance-ui';



type SecondParameter<T extends (...args: any) => any> = Parameters<T>[1];


/**
 * @summary Get all brands
 */
export const getAllBrand = (
    
 options?: SecondParameter<typeof customInstance>,signal?: AbortSignal
) => {
      
      
      return customInstance<BrandEnitiy[]>(
      {url: `/v1/entities/brand`, method: 'GET', signal
    },
      options);
    }
  

export const getGetAllBrandQueryKey = () => {
    return [`/v1/entities/brand`] as const;
    }

    
export const getGetAllBrandQueryOptions = <TData = Awaited<ReturnType<typeof getAllBrand>>, TError = unknown>( options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAllBrand>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetAllBrandQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getAllBrand>>> = ({ signal }) => getAllBrand(requestOptions, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getAllBrand>>, TError, TData> & { queryKey: QueryKey }
}

export type GetAllBrandQueryResult = NonNullable<Awaited<ReturnType<typeof getAllBrand>>>
export type GetAllBrandQueryError = unknown

/**
 * @summary Get all brands
 */
export const useGetAllBrand = <TData = Awaited<ReturnType<typeof getAllBrand>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAllBrand>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = getGetAllBrandQueryOptions(options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



/**
 * @summary Create a brand
 */
export const createOneBrand = (
    brand: Brand,
 options?: SecondParameter<typeof customInstance>,) => {
      
      
      return customInstance<BrandEnitiy>(
      {url: `/v1/entities/brand`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: brand
    },
      options);
    }
  


export const getCreateOneBrandMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof createOneBrand>>, TError,{data: Brand}, TContext>, request?: SecondParameter<typeof customInstance>}
): UseMutationOptions<Awaited<ReturnType<typeof createOneBrand>>, TError,{data: Brand}, TContext> => {
 const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof createOneBrand>>, {data: Brand}> = (props) => {
          const {data} = props ?? {};

          return  createOneBrand(data,requestOptions)
        }

        


   return  { mutationFn, ...mutationOptions }}

    export type CreateOneBrandMutationResult = NonNullable<Awaited<ReturnType<typeof createOneBrand>>>
    export type CreateOneBrandMutationBody = Brand
    export type CreateOneBrandMutationError = unknown

    /**
 * @summary Create a brand
 */
export const useCreateOneBrand = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof createOneBrand>>, TError,{data: Brand}, TContext>, request?: SecondParameter<typeof customInstance>}
) => {

      const mutationOptions = getCreateOneBrandMutationOptions(options);

      return useMutation(mutationOptions);
    }
    /**
 * @summary Get brands by query
 */
export const getByQueryBrand = (
    params?: GetByQueryBrandParams,
 options?: SecondParameter<typeof customInstance>,signal?: AbortSignal
) => {
      
      
      return customInstance<BrandEnitiy[]>(
      {url: `/v1/entities/brand/query`, method: 'GET',
        params, signal
    },
      options);
    }
  

export const getGetByQueryBrandQueryKey = (params?: GetByQueryBrandParams,) => {
    return [`/v1/entities/brand/query`, ...(params ? [params]: [])] as const;
    }

    
export const getGetByQueryBrandQueryOptions = <TData = Awaited<ReturnType<typeof getByQueryBrand>>, TError = unknown>(params?: GetByQueryBrandParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getByQueryBrand>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetByQueryBrandQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getByQueryBrand>>> = ({ signal }) => getByQueryBrand(params, requestOptions, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getByQueryBrand>>, TError, TData> & { queryKey: QueryKey }
}

export type GetByQueryBrandQueryResult = NonNullable<Awaited<ReturnType<typeof getByQueryBrand>>>
export type GetByQueryBrandQueryError = unknown

/**
 * @summary Get brands by query
 */
export const useGetByQueryBrand = <TData = Awaited<ReturnType<typeof getByQueryBrand>>, TError = unknown>(
 params?: GetByQueryBrandParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getByQueryBrand>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = getGetByQueryBrandQueryOptions(params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



/**
 * @summary Get brand by id
 */
export const getOneBrand = (
    id: number,
 options?: SecondParameter<typeof customInstance>,signal?: AbortSignal
) => {
      
      
      return customInstance<BrandEnitiy>(
      {url: `/v1/entities/brand/${id}`, method: 'GET', signal
    },
      options);
    }
  

export const getGetOneBrandQueryKey = (id: number,) => {
    return [`/v1/entities/brand/${id}`] as const;
    }

    
export const getGetOneBrandQueryOptions = <TData = Awaited<ReturnType<typeof getOneBrand>>, TError = unknown>(id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOneBrand>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetOneBrandQueryKey(id);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getOneBrand>>> = ({ signal }) => getOneBrand(id, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(id), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getOneBrand>>, TError, TData> & { queryKey: QueryKey }
}

export type GetOneBrandQueryResult = NonNullable<Awaited<ReturnType<typeof getOneBrand>>>
export type GetOneBrandQueryError = unknown

/**
 * @summary Get brand by id
 */
export const useGetOneBrand = <TData = Awaited<ReturnType<typeof getOneBrand>>, TError = unknown>(
 id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOneBrand>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = getGetOneBrandQueryOptions(id,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



/**
 * @summary Update a brand
 */
export const updateOneBrand = (
    id: unknown,
    brandEnitiy: BrandEnitiy,
 options?: SecondParameter<typeof customInstance>,) => {
      
      
      return customInstance<unknown>(
      {url: `/v1/entities/brand/${id}`, method: 'PUT',
      headers: {'Content-Type': 'application/json', },
      data: brandEnitiy
    },
      options);
    }
  


export const getUpdateOneBrandMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof updateOneBrand>>, TError,{id: unknown;data: BrandEnitiy}, TContext>, request?: SecondParameter<typeof customInstance>}
): UseMutationOptions<Awaited<ReturnType<typeof updateOneBrand>>, TError,{id: unknown;data: BrandEnitiy}, TContext> => {
 const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof updateOneBrand>>, {id: unknown;data: BrandEnitiy}> = (props) => {
          const {id,data} = props ?? {};

          return  updateOneBrand(id,data,requestOptions)
        }

        


   return  { mutationFn, ...mutationOptions }}

    export type UpdateOneBrandMutationResult = NonNullable<Awaited<ReturnType<typeof updateOneBrand>>>
    export type UpdateOneBrandMutationBody = BrandEnitiy
    export type UpdateOneBrandMutationError = unknown

    /**
 * @summary Update a brand
 */
export const useUpdateOneBrand = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof updateOneBrand>>, TError,{id: unknown;data: BrandEnitiy}, TContext>, request?: SecondParameter<typeof customInstance>}
) => {

      const mutationOptions = getUpdateOneBrandMutationOptions(options);

      return useMutation(mutationOptions);
    }
    /**
 * @summary Remove a brand
 */
export const removeOneBrand = (
    id: number,
 options?: SecondParameter<typeof customInstance>,) => {
      
      
      return customInstance<unknown>(
      {url: `/v1/entities/brand/${id}`, method: 'DELETE'
    },
      options);
    }
  


export const getRemoveOneBrandMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof removeOneBrand>>, TError,{id: number}, TContext>, request?: SecondParameter<typeof customInstance>}
): UseMutationOptions<Awaited<ReturnType<typeof removeOneBrand>>, TError,{id: number}, TContext> => {
 const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof removeOneBrand>>, {id: number}> = (props) => {
          const {id} = props ?? {};

          return  removeOneBrand(id,requestOptions)
        }

        


   return  { mutationFn, ...mutationOptions }}

    export type RemoveOneBrandMutationResult = NonNullable<Awaited<ReturnType<typeof removeOneBrand>>>
    
    export type RemoveOneBrandMutationError = unknown

    /**
 * @summary Remove a brand
 */
export const useRemoveOneBrand = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof removeOneBrand>>, TError,{id: number}, TContext>, request?: SecondParameter<typeof customInstance>}
) => {

      const mutationOptions = getRemoveOneBrandMutationOptions(options);

      return useMutation(mutationOptions);
    }
    