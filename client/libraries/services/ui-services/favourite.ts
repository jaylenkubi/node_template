/**
 * Generated by orval v6.24.0 üç∫
 * Do not edit manually.
 * thecube
 * Platform API
 * OpenAPI spec version: 1.0.0
 */
import {
  useMutation,
  useQuery
} from '@tanstack/react-query'
import type {
  MutationFunction,
  QueryFunction,
  QueryKey,
  UseMutationOptions,
  UseQueryOptions,
  UseQueryResult
} from '@tanstack/react-query'
import type {
  Favourite,
  FavouriteEntity,
  GetByQueryFavouriteParams
} from './models'
import { customInstance } from './custom-instance-ui';



type SecondParameter<T extends (...args: any) => any> = Parameters<T>[1];


/**
 * @summary Get all favourites
 */
export const getAllFavourite = (
    
 options?: SecondParameter<typeof customInstance>,signal?: AbortSignal
) => {
      
      
      return customInstance<FavouriteEntity[]>(
      {url: `/v1/entities/favourite`, method: 'GET', signal
    },
      options);
    }
  

export const getGetAllFavouriteQueryKey = () => {
    return [`/v1/entities/favourite`] as const;
    }

    
export const getGetAllFavouriteQueryOptions = <TData = Awaited<ReturnType<typeof getAllFavourite>>, TError = unknown>( options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAllFavourite>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetAllFavouriteQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getAllFavourite>>> = ({ signal }) => getAllFavourite(requestOptions, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getAllFavourite>>, TError, TData> & { queryKey: QueryKey }
}

export type GetAllFavouriteQueryResult = NonNullable<Awaited<ReturnType<typeof getAllFavourite>>>
export type GetAllFavouriteQueryError = unknown

/**
 * @summary Get all favourites
 */
export const useGetAllFavourite = <TData = Awaited<ReturnType<typeof getAllFavourite>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAllFavourite>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = getGetAllFavouriteQueryOptions(options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



/**
 * @summary Create a favourite
 */
export const createOneFavourite = (
    favourite: Favourite,
 options?: SecondParameter<typeof customInstance>,) => {
      
      
      return customInstance<FavouriteEntity>(
      {url: `/v1/entities/favourite`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: favourite
    },
      options);
    }
  


export const getCreateOneFavouriteMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof createOneFavourite>>, TError,{data: Favourite}, TContext>, request?: SecondParameter<typeof customInstance>}
): UseMutationOptions<Awaited<ReturnType<typeof createOneFavourite>>, TError,{data: Favourite}, TContext> => {
 const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof createOneFavourite>>, {data: Favourite}> = (props) => {
          const {data} = props ?? {};

          return  createOneFavourite(data,requestOptions)
        }

        


   return  { mutationFn, ...mutationOptions }}

    export type CreateOneFavouriteMutationResult = NonNullable<Awaited<ReturnType<typeof createOneFavourite>>>
    export type CreateOneFavouriteMutationBody = Favourite
    export type CreateOneFavouriteMutationError = unknown

    /**
 * @summary Create a favourite
 */
export const useCreateOneFavourite = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof createOneFavourite>>, TError,{data: Favourite}, TContext>, request?: SecondParameter<typeof customInstance>}
) => {

      const mutationOptions = getCreateOneFavouriteMutationOptions(options);

      return useMutation(mutationOptions);
    }
    /**
 * @summary Get favourites by query
 */
export const getByQueryFavourite = (
    params?: GetByQueryFavouriteParams,
 options?: SecondParameter<typeof customInstance>,signal?: AbortSignal
) => {
      
      
      return customInstance<FavouriteEntity[]>(
      {url: `/v1/entities/favourite/query`, method: 'GET',
        params, signal
    },
      options);
    }
  

export const getGetByQueryFavouriteQueryKey = (params?: GetByQueryFavouriteParams,) => {
    return [`/v1/entities/favourite/query`, ...(params ? [params]: [])] as const;
    }

    
export const getGetByQueryFavouriteQueryOptions = <TData = Awaited<ReturnType<typeof getByQueryFavourite>>, TError = unknown>(params?: GetByQueryFavouriteParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getByQueryFavourite>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetByQueryFavouriteQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getByQueryFavourite>>> = ({ signal }) => getByQueryFavourite(params, requestOptions, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getByQueryFavourite>>, TError, TData> & { queryKey: QueryKey }
}

export type GetByQueryFavouriteQueryResult = NonNullable<Awaited<ReturnType<typeof getByQueryFavourite>>>
export type GetByQueryFavouriteQueryError = unknown

/**
 * @summary Get favourites by query
 */
export const useGetByQueryFavourite = <TData = Awaited<ReturnType<typeof getByQueryFavourite>>, TError = unknown>(
 params?: GetByQueryFavouriteParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getByQueryFavourite>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = getGetByQueryFavouriteQueryOptions(params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



/**
 * @summary Get favourite by id
 */
export const getOneFavourite = (
    id: number,
 options?: SecondParameter<typeof customInstance>,signal?: AbortSignal
) => {
      
      
      return customInstance<FavouriteEntity>(
      {url: `/v1/entities/favourite/${id}`, method: 'GET', signal
    },
      options);
    }
  

export const getGetOneFavouriteQueryKey = (id: number,) => {
    return [`/v1/entities/favourite/${id}`] as const;
    }

    
export const getGetOneFavouriteQueryOptions = <TData = Awaited<ReturnType<typeof getOneFavourite>>, TError = unknown>(id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOneFavourite>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetOneFavouriteQueryKey(id);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getOneFavourite>>> = ({ signal }) => getOneFavourite(id, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(id), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getOneFavourite>>, TError, TData> & { queryKey: QueryKey }
}

export type GetOneFavouriteQueryResult = NonNullable<Awaited<ReturnType<typeof getOneFavourite>>>
export type GetOneFavouriteQueryError = unknown

/**
 * @summary Get favourite by id
 */
export const useGetOneFavourite = <TData = Awaited<ReturnType<typeof getOneFavourite>>, TError = unknown>(
 id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOneFavourite>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = getGetOneFavouriteQueryOptions(id,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



/**
 * @summary Update a favourite
 */
export const updateOneFavourite = (
    id: unknown,
    favouriteEntity: FavouriteEntity,
 options?: SecondParameter<typeof customInstance>,) => {
      
      
      return customInstance<unknown>(
      {url: `/v1/entities/favourite/${id}`, method: 'PUT',
      headers: {'Content-Type': 'application/json', },
      data: favouriteEntity
    },
      options);
    }
  


export const getUpdateOneFavouriteMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof updateOneFavourite>>, TError,{id: unknown;data: FavouriteEntity}, TContext>, request?: SecondParameter<typeof customInstance>}
): UseMutationOptions<Awaited<ReturnType<typeof updateOneFavourite>>, TError,{id: unknown;data: FavouriteEntity}, TContext> => {
 const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof updateOneFavourite>>, {id: unknown;data: FavouriteEntity}> = (props) => {
          const {id,data} = props ?? {};

          return  updateOneFavourite(id,data,requestOptions)
        }

        


   return  { mutationFn, ...mutationOptions }}

    export type UpdateOneFavouriteMutationResult = NonNullable<Awaited<ReturnType<typeof updateOneFavourite>>>
    export type UpdateOneFavouriteMutationBody = FavouriteEntity
    export type UpdateOneFavouriteMutationError = unknown

    /**
 * @summary Update a favourite
 */
export const useUpdateOneFavourite = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof updateOneFavourite>>, TError,{id: unknown;data: FavouriteEntity}, TContext>, request?: SecondParameter<typeof customInstance>}
) => {

      const mutationOptions = getUpdateOneFavouriteMutationOptions(options);

      return useMutation(mutationOptions);
    }
    /**
 * @summary Remove a favourite
 */
export const removeOneFavourite = (
    id: number,
 options?: SecondParameter<typeof customInstance>,) => {
      
      
      return customInstance<unknown>(
      {url: `/v1/entities/favourite/${id}`, method: 'DELETE'
    },
      options);
    }
  


export const getRemoveOneFavouriteMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof removeOneFavourite>>, TError,{id: number}, TContext>, request?: SecondParameter<typeof customInstance>}
): UseMutationOptions<Awaited<ReturnType<typeof removeOneFavourite>>, TError,{id: number}, TContext> => {
 const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof removeOneFavourite>>, {id: number}> = (props) => {
          const {id} = props ?? {};

          return  removeOneFavourite(id,requestOptions)
        }

        


   return  { mutationFn, ...mutationOptions }}

    export type RemoveOneFavouriteMutationResult = NonNullable<Awaited<ReturnType<typeof removeOneFavourite>>>
    
    export type RemoveOneFavouriteMutationError = unknown

    /**
 * @summary Remove a favourite
 */
export const useRemoveOneFavourite = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof removeOneFavourite>>, TError,{id: number}, TContext>, request?: SecondParameter<typeof customInstance>}
) => {

      const mutationOptions = getRemoveOneFavouriteMutationOptions(options);

      return useMutation(mutationOptions);
    }
    