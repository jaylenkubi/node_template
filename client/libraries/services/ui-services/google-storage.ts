/**
 * Generated by orval v6.28.2 üç∫
 * Do not edit manually.
 * thecube
 * Platform API
 * OpenAPI spec version: 1.0.0
 */
import {
  useMutation
} from '@tanstack/react-query'
import type {
  MutationFunction,
  UseMutationOptions,
  UseMutationResult
} from '@tanstack/react-query'
import type {
  UploadImageWithUrlParams,
  UploadImageWithUrlRequest
} from './models'
import { customInstance } from './custom-instance-ui';



type SecondParameter<T extends (...args: any) => any> = Parameters<T>[1];


/**
 * @summary save image to gcs
 */
export const uploadImageWithUrl = (
    uploadImageWithUrlRequest?: UploadImageWithUrlRequest,
    params?: UploadImageWithUrlParams,
 options?: SecondParameter<typeof customInstance>,) => {
      
      
      return customInstance<unknown>(
      {url: `/v1/gcs/upload`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: uploadImageWithUrlRequest,
        params
    },
      options);
    }
  


export const getUploadImageWithUrlMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof uploadImageWithUrl>>, TError,{data: UploadImageWithUrlRequest;params?: UploadImageWithUrlParams}, TContext>, request?: SecondParameter<typeof customInstance>}
): UseMutationOptions<Awaited<ReturnType<typeof uploadImageWithUrl>>, TError,{data: UploadImageWithUrlRequest;params?: UploadImageWithUrlParams}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof uploadImageWithUrl>>, {data: UploadImageWithUrlRequest;params?: UploadImageWithUrlParams}> = (props) => {
          const {data,params} = props ?? {};

          return  uploadImageWithUrl(data,params,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type UploadImageWithUrlMutationResult = NonNullable<Awaited<ReturnType<typeof uploadImageWithUrl>>>
    export type UploadImageWithUrlMutationBody = UploadImageWithUrlRequest
    export type UploadImageWithUrlMutationError = unknown

    /**
 * @summary save image to gcs
 */
export const useUploadImageWithUrl = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof uploadImageWithUrl>>, TError,{data: UploadImageWithUrlRequest;params?: UploadImageWithUrlParams}, TContext>, request?: SecondParameter<typeof customInstance>}
): UseMutationResult<
        Awaited<ReturnType<typeof uploadImageWithUrl>>,
        TError,
        {data: UploadImageWithUrlRequest;params?: UploadImageWithUrlParams},
        TContext
      > => {

      const mutationOptions = getUploadImageWithUrlMutationOptions(options);

      return useMutation(mutationOptions);
    }
    